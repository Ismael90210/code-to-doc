repository_name,func_path_in_repository,func_name,whole_func_string,language,func_code_string,func_code_tokens,func_documentation_string,func_documentation_tokens,split_name,func_code_url
HHammond/PrettyPandas,prettypandas/formatters.py,_surpress_formatting_errors,"def _surpress_formatting_errors(fn):
    """"""
    I know this is dangerous and the wrong way to solve the problem, but when
    using both row and columns summaries it's easier to just swallow errors
    so users can format their tables how they need.
    """"""
    @wraps(fn)
    def inner(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except ValueError:
            return """"
    return inner",python,"def _surpress_formatting_errors(fn):
    """"""
    I know this is dangerous and the wrong way to solve the problem, but when
    using both row and columns summaries it's easier to just swallow errors
    so users can format their tables how they need.
    """"""
    @wraps(fn)
    def inner(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except ValueError:
            return """"
    return inner","['def' '_surpress_formatting_errors' '(' 'fn' ')' ':' '@' 'wraps' '(' 'fn'
 ')' 'def' 'inner' '(' '*' 'args' ',' '*' '*' 'kwargs' ')' ':' 'try' ':'
 'return' 'fn' '(' '*' 'args' ',' '*' '*' 'kwargs' ')' 'except'
 'ValueError' ':' 'return' '""""' 'return' 'inner']","I know this is dangerous and the wrong way to solve the problem, but when
    using both row and columns summaries it's easier to just swallow errors
    so users can format their tables how they need.","['I' 'know' 'this' 'is' 'dangerous' 'and' 'the' 'wrong' 'way' 'to' 'solve'
 'the' 'problem' 'but' 'when' 'using' 'both' 'row' 'and' 'columns'
 'summaries' 'it' 's' 'easier' 'to' 'just' 'swallow' 'errors' 'so' 'users'
 'can' 'format' 'their' 'tables' 'how' 'they' 'need' '.']",train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/formatters.py#L12-L24
HHammond/PrettyPandas,prettypandas/formatters.py,_format_numer,"def _format_numer(number_format, prefix='', suffix=''):
    """"""Format a number to a string.""""""
    @_surpress_formatting_errors
    def inner(v):
        if isinstance(v, Number):
            return (""{{}}{{:{}}}{{}}""
                    .format(number_format)
                    .format(prefix, v, suffix))
        else:
            raise TypeError(""Numberic type required."")
    return inner",python,"def _format_numer(number_format, prefix='', suffix=''):
    """"""Format a number to a string.""""""
    @_surpress_formatting_errors
    def inner(v):
        if isinstance(v, Number):
            return (""{{}}{{:{}}}{{}}""
                    .format(number_format)
                    .format(prefix, v, suffix))
        else:
            raise TypeError(""Numberic type required."")
    return inner","['def' '_format_numer' '(' 'number_format' ',' 'prefix' '=' ""''"" ','
 'suffix' '=' ""''"" ')' ':' '@' '_surpress_formatting_errors' 'def' 'inner'
 '(' 'v' ')' ':' 'if' 'isinstance' '(' 'v' ',' 'Number' ')' ':' 'return'
 '(' '""{{}}{{:{}}}{{}}""' '.' 'format' '(' 'number_format' ')' '.' 'format'
 '(' 'prefix' ',' 'v' ',' 'suffix' ')' ')' 'else' ':' 'raise' 'TypeError'
 '(' '""Numberic type required.""' ')' 'return' 'inner']",Format a number to a string.,['Format' 'a' 'number' 'to' 'a' 'string' '.'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/formatters.py#L27-L37
HHammond/PrettyPandas,prettypandas/formatters.py,as_percent,"def as_percent(precision=2, **kwargs):
    """"""Convert number to percentage string.

    Parameters:
    -----------
    :param v: numerical value to be converted
    :param precision: int
        decimal places to round to
    """"""
    if not isinstance(precision, Integral):
        raise TypeError(""Precision must be an integer."")

    return _surpress_formatting_errors(
        _format_numer("".{}%"".format(precision))
    )",python,"def as_percent(precision=2, **kwargs):
    """"""Convert number to percentage string.

    Parameters:
    -----------
    :param v: numerical value to be converted
    :param precision: int
        decimal places to round to
    """"""
    if not isinstance(precision, Integral):
        raise TypeError(""Precision must be an integer."")

    return _surpress_formatting_errors(
        _format_numer("".{}%"".format(precision))
    )","['def' 'as_percent' '(' 'precision' '=' '2' ',' '*' '*' 'kwargs' ')' ':'
 'if' 'not' 'isinstance' '(' 'precision' ',' 'Integral' ')' ':' 'raise'
 'TypeError' '(' '""Precision must be an integer.""' ')' 'return'
 '_surpress_formatting_errors' '(' '_format_numer' '(' '"".{}%""' '.'
 'format' '(' 'precision' ')' ')' ')']","Convert number to percentage string.

    Parameters:
    -----------
    :param v: numerical value to be converted
    :param precision: int
        decimal places to round to",['Convert' 'number' 'to' 'percentage' 'string' '.'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/formatters.py#L40-L54
HHammond/PrettyPandas,prettypandas/formatters.py,as_unit,"def as_unit(unit, precision=2, location='suffix'):
    """"""Convert value to unit.

    Parameters:
    -----------
    :param v: numerical value
    :param unit: string of unit
    :param precision: int
        decimal places to round to
    :param location:
        'prefix' or 'suffix' representing where the currency symbol falls
        relative to the value
    """"""
    if not isinstance(precision, Integral):
        raise TypeError(""Precision must be an integer."")

    if location == 'prefix':
        formatter = partial(_format_numer, prefix=unit)
    elif location == 'suffix':
        formatter = partial(_format_numer, suffix=unit)
    else:
        raise ValueError(""location must be either 'prefix' or 'suffix'."")

    return _surpress_formatting_errors(
        formatter(""0.{}f"".format(precision))
    )",python,"def as_unit(unit, precision=2, location='suffix'):
    """"""Convert value to unit.

    Parameters:
    -----------
    :param v: numerical value
    :param unit: string of unit
    :param precision: int
        decimal places to round to
    :param location:
        'prefix' or 'suffix' representing where the currency symbol falls
        relative to the value
    """"""
    if not isinstance(precision, Integral):
        raise TypeError(""Precision must be an integer."")

    if location == 'prefix':
        formatter = partial(_format_numer, prefix=unit)
    elif location == 'suffix':
        formatter = partial(_format_numer, suffix=unit)
    else:
        raise ValueError(""location must be either 'prefix' or 'suffix'."")

    return _surpress_formatting_errors(
        formatter(""0.{}f"".format(precision))
    )","['def' 'as_unit' '(' 'unit' ',' 'precision' '=' '2' ',' 'location' '='
 ""'suffix'"" ')' ':' 'if' 'not' 'isinstance' '(' 'precision' ',' 'Integral'
 ')' ':' 'raise' 'TypeError' '(' '""Precision must be an integer.""' ')'
 'if' 'location' '==' ""'prefix'"" ':' 'formatter' '=' 'partial' '('
 '_format_numer' ',' 'prefix' '=' 'unit' ')' 'elif' 'location' '=='
 ""'suffix'"" ':' 'formatter' '=' 'partial' '(' '_format_numer' ',' 'suffix'
 '=' 'unit' ')' 'else' ':' 'raise' 'ValueError' '('
 '""location must be either \'prefix\' or \'suffix\'.""' ')' 'return'
 '_surpress_formatting_errors' '(' 'formatter' '(' '""0.{}f""' '.' 'format'
 '(' 'precision' ')' ')' ')']","Convert value to unit.

    Parameters:
    -----------
    :param v: numerical value
    :param unit: string of unit
    :param precision: int
        decimal places to round to
    :param location:
        'prefix' or 'suffix' representing where the currency symbol falls
        relative to the value",['Convert' 'value' 'to' 'unit' '.'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/formatters.py#L57-L82
HHammond/PrettyPandas,prettypandas/summarizer.py,Aggregate.apply,"def apply(self, df):
        """"""Compute aggregate over DataFrame""""""

        if self.subset:
            if _axis_is_rows(self.axis):
                df = df[self.subset]
            if _axis_is_cols(self.axis):
                df = df.loc[self.subset]

        result = df.agg(self.func, axis=self.axis, *self.args, **self.kwargs)
        result.name = self.title
        return result",python,"def apply(self, df):
        """"""Compute aggregate over DataFrame""""""

        if self.subset:
            if _axis_is_rows(self.axis):
                df = df[self.subset]
            if _axis_is_cols(self.axis):
                df = df.loc[self.subset]

        result = df.agg(self.func, axis=self.axis, *self.args, **self.kwargs)
        result.name = self.title
        return result","['def' 'apply' '(' 'self' ',' 'df' ')' ':' 'if' 'self' '.' 'subset' ':'
 'if' '_axis_is_rows' '(' 'self' '.' 'axis' ')' ':' 'df' '=' 'df' '['
 'self' '.' 'subset' ']' 'if' '_axis_is_cols' '(' 'self' '.' 'axis' ')'
 ':' 'df' '=' 'df' '.' 'loc' '[' 'self' '.' 'subset' ']' 'result' '=' 'df'
 '.' 'agg' '(' 'self' '.' 'func' ',' 'axis' '=' 'self' '.' 'axis' ',' '*'
 'self' '.' 'args' ',' '*' '*' 'self' '.' 'kwargs' ')' 'result' '.' 'name'
 '=' 'self' '.' 'title' 'return' 'result']",Compute aggregate over DataFrame,['Compute' 'aggregate' 'over' 'DataFrame'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L53-L64
HHammond/PrettyPandas,prettypandas/summarizer.py,Formatter.apply,"def apply(self, styler):
        """"""Apply Summary over Pandas Styler""""""
        return styler.format(self.formatter, *self.args, **self.kwargs)",python,"def apply(self, styler):
        """"""Apply Summary over Pandas Styler""""""
        return styler.format(self.formatter, *self.args, **self.kwargs)","['def' 'apply' '(' 'self' ',' 'styler' ')' ':' 'return' 'styler' '.'
 'format' '(' 'self' '.' 'formatter' ',' '*' 'self' '.' 'args' ',' '*' '*'
 'self' '.' 'kwargs' ')']",Apply Summary over Pandas Styler,['Apply' 'Summary' 'over' 'Pandas' 'Styler'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L85-L87
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas._apply_summaries,"def _apply_summaries(self):
        """"""Add all summary rows and columns.""""""

        def as_frame(r):
            if isinstance(r, pd.Series):
                return r.to_frame()
            else:
                return r

        df = self.data

        if df.index.nlevels > 1:
            raise ValueError(
                ""You cannot currently have both summary rows and columns on a ""
                ""MultiIndex.""
            )

        _df = df
        if self.summary_rows:
            rows = pd.concat([agg.apply(_df)
                              for agg in self._cleaned_summary_rows], axis=1).T
            df = pd.concat([df, as_frame(rows)], axis=0)

        if self.summary_cols:
            cols = pd.concat([agg.apply(_df)
                              for agg in self._cleaned_summary_cols], axis=1)
            df = pd.concat([df, as_frame(cols)], axis=1)

        return df",python,"def _apply_summaries(self):
        """"""Add all summary rows and columns.""""""

        def as_frame(r):
            if isinstance(r, pd.Series):
                return r.to_frame()
            else:
                return r

        df = self.data

        if df.index.nlevels > 1:
            raise ValueError(
                ""You cannot currently have both summary rows and columns on a ""
                ""MultiIndex.""
            )

        _df = df
        if self.summary_rows:
            rows = pd.concat([agg.apply(_df)
                              for agg in self._cleaned_summary_rows], axis=1).T
            df = pd.concat([df, as_frame(rows)], axis=0)

        if self.summary_cols:
            cols = pd.concat([agg.apply(_df)
                              for agg in self._cleaned_summary_cols], axis=1)
            df = pd.concat([df, as_frame(cols)], axis=1)

        return df","['def' '_apply_summaries' '(' 'self' ')' ':' 'def' 'as_frame' '(' 'r' ')'
 ':' 'if' 'isinstance' '(' 'r' ',' 'pd' '.' 'Series' ')' ':' 'return' 'r'
 '.' 'to_frame' '(' ')' 'else' ':' 'return' 'r' 'df' '=' 'self' '.' 'data'
 'if' 'df' '.' 'index' '.' 'nlevels' '>' '1' ':' 'raise' 'ValueError' '('
 '""You cannot currently have both summary rows and columns on a ""'
 '""MultiIndex.""' ')' '_df' '=' 'df' 'if' 'self' '.' 'summary_rows' ':'
 'rows' '=' 'pd' '.' 'concat' '(' '[' 'agg' '.' 'apply' '(' '_df' ')'
 'for' 'agg' 'in' 'self' '.' '_cleaned_summary_rows' ']' ',' 'axis' '='
 '1' ')' '.' 'T' 'df' '=' 'pd' '.' 'concat' '(' '[' 'df' ',' 'as_frame'
 '(' 'rows' ')' ']' ',' 'axis' '=' '0' ')' 'if' 'self' '.' 'summary_cols'
 ':' 'cols' '=' 'pd' '.' 'concat' '(' '[' 'agg' '.' 'apply' '(' '_df' ')'
 'for' 'agg' 'in' 'self' '.' '_cleaned_summary_cols' ']' ',' 'axis' '='
 '1' ')' 'df' '=' 'pd' '.' 'concat' '(' '[' 'df' ',' 'as_frame' '(' 'cols'
 ')' ']' ',' 'axis' '=' '1' ')' 'return' 'df']",Add all summary rows and columns.,['Add' 'all' 'summary' 'rows' 'and' 'columns' '.'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L162-L190
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas.style,"def style(self):
        """"""Add summaries and convert to Pandas Styler""""""
        row_titles = [a.title for a in self._cleaned_summary_rows]
        col_titles = [a.title for a in self._cleaned_summary_cols]
        row_ix = pd.IndexSlice[row_titles, :]
        col_ix = pd.IndexSlice[:, col_titles]

        def handle_na(df):
            df.loc[col_ix] = df.loc[col_ix].fillna('')
            df.loc[row_ix] = df.loc[row_ix].fillna('')
            return df

        styler = (
            self
            .frame
            .pipe(handle_na)
            .style
            .applymap(lambda r: 'font-weight: 900', subset=row_ix)
            .applymap(lambda r: 'font-weight: 900', subset=col_ix)
        )

        for formatter in self.formatters:
            styler = formatter.apply(styler)

        return styler",python,"def style(self):
        """"""Add summaries and convert to Pandas Styler""""""
        row_titles = [a.title for a in self._cleaned_summary_rows]
        col_titles = [a.title for a in self._cleaned_summary_cols]
        row_ix = pd.IndexSlice[row_titles, :]
        col_ix = pd.IndexSlice[:, col_titles]

        def handle_na(df):
            df.loc[col_ix] = df.loc[col_ix].fillna('')
            df.loc[row_ix] = df.loc[row_ix].fillna('')
            return df

        styler = (
            self
            .frame
            .pipe(handle_na)
            .style
            .applymap(lambda r: 'font-weight: 900', subset=row_ix)
            .applymap(lambda r: 'font-weight: 900', subset=col_ix)
        )

        for formatter in self.formatters:
            styler = formatter.apply(styler)

        return styler","['def' 'style' '(' 'self' ')' ':' 'row_titles' '=' '[' 'a' '.' 'title'
 'for' 'a' 'in' 'self' '.' '_cleaned_summary_rows' ']' 'col_titles' '='
 '[' 'a' '.' 'title' 'for' 'a' 'in' 'self' '.' '_cleaned_summary_cols' ']'
 'row_ix' '=' 'pd' '.' 'IndexSlice' '[' 'row_titles' ',' ':' ']' 'col_ix'
 '=' 'pd' '.' 'IndexSlice' '[' ':' ',' 'col_titles' ']' 'def' 'handle_na'
 '(' 'df' ')' ':' 'df' '.' 'loc' '[' 'col_ix' ']' '=' 'df' '.' 'loc' '['
 'col_ix' ']' '.' 'fillna' '(' ""''"" ')' 'df' '.' 'loc' '[' 'row_ix' ']'
 '=' 'df' '.' 'loc' '[' 'row_ix' ']' '.' 'fillna' '(' ""''"" ')' 'return'
 'df' 'styler' '=' '(' 'self' '.' 'frame' '.' 'pipe' '(' 'handle_na' ')'
 '.' 'style' '.' 'applymap' '(' 'lambda' 'r' ':' ""'font-weight: 900'"" ','
 'subset' '=' 'row_ix' ')' '.' 'applymap' '(' 'lambda' 'r' ':'
 ""'font-weight: 900'"" ',' 'subset' '=' 'col_ix' ')' ')' 'for' 'formatter'
 'in' 'self' '.' 'formatters' ':' 'styler' '=' 'formatter' '.' 'apply' '('
 'styler' ')' 'return' 'styler']",Add summaries and convert to Pandas Styler,['Add' 'summaries' 'and' 'convert' 'to' 'Pandas' 'Styler'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L202-L226
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas.summary,"def summary(self,
                func=methodcaller('sum'),
                title='Total',
                axis=0,
                subset=None,
                *args,
                **kwargs):
        """"""Add multiple summary rows or columns to the dataframe.

        Parameters
        ----------
        :param func: function to be used for a summary.
        :param titles: Title for this summary column.
        :param axis:
            Same as numpy and pandas axis argument. A value of None will cause
            the summary to be applied to both rows and columns.
        :param args: Positional arguments passed to all the functions.
        :param kwargs: Keyword arguments passed to all the functions.

        The results of summary can be chained together.
        """"""

        if axis is None:
            return (
                self
                .summary(
                    func=func,
                    title=title,
                    axis=0,
                    subset=subset,
                    *args,
                    **kwargs
                )
                .summary(
                    func=func,
                    title=title,
                    axis=1,
                    subset=subset,
                    *args,
                    **kwargs
                )
            )
        else:
            agg = Aggregate(title, func, subset=subset,
                            axis=axis, *args, **kwargs)
            return self._add_summary(agg)",python,"def summary(self,
                func=methodcaller('sum'),
                title='Total',
                axis=0,
                subset=None,
                *args,
                **kwargs):
        """"""Add multiple summary rows or columns to the dataframe.

        Parameters
        ----------
        :param func: function to be used for a summary.
        :param titles: Title for this summary column.
        :param axis:
            Same as numpy and pandas axis argument. A value of None will cause
            the summary to be applied to both rows and columns.
        :param args: Positional arguments passed to all the functions.
        :param kwargs: Keyword arguments passed to all the functions.

        The results of summary can be chained together.
        """"""

        if axis is None:
            return (
                self
                .summary(
                    func=func,
                    title=title,
                    axis=0,
                    subset=subset,
                    *args,
                    **kwargs
                )
                .summary(
                    func=func,
                    title=title,
                    axis=1,
                    subset=subset,
                    *args,
                    **kwargs
                )
            )
        else:
            agg = Aggregate(title, func, subset=subset,
                            axis=axis, *args, **kwargs)
            return self._add_summary(agg)","['def' 'summary' '(' 'self' ',' 'func' '=' 'methodcaller' '(' ""'sum'"" ')'
 ',' 'title' '=' ""'Total'"" ',' 'axis' '=' '0' ',' 'subset' '=' 'None' ','
 '*' 'args' ',' '*' '*' 'kwargs' ')' ':' 'if' 'axis' 'is' 'None' ':'
 'return' '(' 'self' '.' 'summary' '(' 'func' '=' 'func' ',' 'title' '='
 'title' ',' 'axis' '=' '0' ',' 'subset' '=' 'subset' ',' '*' 'args' ','
 '*' '*' 'kwargs' ')' '.' 'summary' '(' 'func' '=' 'func' ',' 'title' '='
 'title' ',' 'axis' '=' '1' ',' 'subset' '=' 'subset' ',' '*' 'args' ','
 '*' '*' 'kwargs' ')' ')' 'else' ':' 'agg' '=' 'Aggregate' '(' 'title' ','
 'func' ',' 'subset' '=' 'subset' ',' 'axis' '=' 'axis' ',' '*' 'args' ','
 '*' '*' 'kwargs' ')' 'return' 'self' '.' '_add_summary' '(' 'agg' ')']","Add multiple summary rows or columns to the dataframe.

        Parameters
        ----------
        :param func: function to be used for a summary.
        :param titles: Title for this summary column.
        :param axis:
            Same as numpy and pandas axis argument. A value of None will cause
            the summary to be applied to both rows and columns.
        :param args: Positional arguments passed to all the functions.
        :param kwargs: Keyword arguments passed to all the functions.

        The results of summary can be chained together.","['Add' 'multiple' 'summary' 'rows' 'or' 'columns' 'to' 'the' 'dataframe'
 '.']",train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L240-L285
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas.as_percent,"def as_percent(self, precision=2, *args, **kwargs):
        """"""Format subset as percentages

        :param precision: Decimal precision
        :param subset: Pandas subset
        """"""
        f = Formatter(as_percent(precision), args, kwargs)
        return self._add_formatter(f)",python,"def as_percent(self, precision=2, *args, **kwargs):
        """"""Format subset as percentages

        :param precision: Decimal precision
        :param subset: Pandas subset
        """"""
        f = Formatter(as_percent(precision), args, kwargs)
        return self._add_formatter(f)","['def' 'as_percent' '(' 'self' ',' 'precision' '=' '2' ',' '*' 'args' ','
 '*' '*' 'kwargs' ')' ':' 'f' '=' 'Formatter' '(' 'as_percent' '('
 'precision' ')' ',' 'args' ',' 'kwargs' ')' 'return' 'self' '.'
 '_add_formatter' '(' 'f' ')']","Format subset as percentages

        :param precision: Decimal precision
        :param subset: Pandas subset",['Format' 'subset' 'as' 'percentages'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L335-L342
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas.as_currency,"def as_currency(self, currency='USD', locale=LOCALE_OBJ, *args, **kwargs):
        """"""Format subset as currency

        :param currency: Currency
        :param locale: Babel locale for currency formatting
        :param subset: Pandas subset
        """"""
        f = Formatter(
            as_currency(currency=currency, locale=locale),
            args,
            kwargs
        )
        return self._add_formatter(f)",python,"def as_currency(self, currency='USD', locale=LOCALE_OBJ, *args, **kwargs):
        """"""Format subset as currency

        :param currency: Currency
        :param locale: Babel locale for currency formatting
        :param subset: Pandas subset
        """"""
        f = Formatter(
            as_currency(currency=currency, locale=locale),
            args,
            kwargs
        )
        return self._add_formatter(f)","['def' 'as_currency' '(' 'self' ',' 'currency' '=' ""'USD'"" ',' 'locale'
 '=' 'LOCALE_OBJ' ',' '*' 'args' ',' '*' '*' 'kwargs' ')' ':' 'f' '='
 'Formatter' '(' 'as_currency' '(' 'currency' '=' 'currency' ',' 'locale'
 '=' 'locale' ')' ',' 'args' ',' 'kwargs' ')' 'return' 'self' '.'
 '_add_formatter' '(' 'f' ')']","Format subset as currency

        :param currency: Currency
        :param locale: Babel locale for currency formatting
        :param subset: Pandas subset",['Format' 'subset' 'as' 'currency'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L344-L356
HHammond/PrettyPandas,prettypandas/summarizer.py,PrettyPandas.as_unit,"def as_unit(self, unit, location='suffix', *args, **kwargs):
        """"""Format subset as with units

        :param unit: string to use as unit
        :param location: prefix or suffix
        :param subset: Pandas subset
        """"""
        f = Formatter(
            as_unit(unit, location=location),
            args,
            kwargs
        )
        return self._add_formatter(f)",python,"def as_unit(self, unit, location='suffix', *args, **kwargs):
        """"""Format subset as with units

        :param unit: string to use as unit
        :param location: prefix or suffix
        :param subset: Pandas subset
        """"""
        f = Formatter(
            as_unit(unit, location=location),
            args,
            kwargs
        )
        return self._add_formatter(f)","['def' 'as_unit' '(' 'self' ',' 'unit' ',' 'location' '=' ""'suffix'"" ','
 '*' 'args' ',' '*' '*' 'kwargs' ')' ':' 'f' '=' 'Formatter' '(' 'as_unit'
 '(' 'unit' ',' 'location' '=' 'location' ')' ',' 'args' ',' 'kwargs' ')'
 'return' 'self' '.' '_add_formatter' '(' 'f' ')']","Format subset as with units

        :param unit: string to use as unit
        :param location: prefix or suffix
        :param subset: Pandas subset",['Format' 'subset' 'as' 'with' 'units'],train,https://github.com/HHammond/PrettyPandas/blob/99a814ffc3aa61f66eaf902afaa4b7802518d33a/prettypandas/summarizer.py#L358-L370
